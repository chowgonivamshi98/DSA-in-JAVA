import java.util.Scanner;

public class binarytreeuse {
// print recurseivly 
    public static void printrec(binarytree<Integer> root) {
        if (root == null) {
            return;
        }
        System.out.print(root.data + ":");
if(root.left!=null)
    System.out.print( "L" + root.left.data+",");
        if(root.right!=null)
            System.out.print( "R" + root.right.data);
        System.out.println();
        printrec(root.left);
        printrec(root.right);
    }
    // to take input
    public static binarytree<Integer> takeinput(){
        System.out.print("Enter root data : ");
        Scanner sc = new Scanner(System.in);
        int root_data = sc.nextInt();
        binarytree<Integer> root = new binarytree<>(root_data);
        if(root_data == -1){
            return null;
        }
        binarytree<Integer> left_child = takeinput();
        binarytree<Integer> right_child = takeinput();
        root.left = left_child;
        root.right = right_child;

return root;
    }
    // to takeinput better
    public static binarytree<Integer> takeinputbetter(boolean isroot,int parentroot,boolean isleft){
        if(isroot){
            System.out.print("Enter the root :");
        }
        else {
            if (isleft) {
                System.out.print("Enter the Left_child :" + parentroot);
            } else {
                System.out.print("Enter the Right_child : " + parentroot);
            }
        }
        Scanner sc = new Scanner(System.in);
        int root_data = sc.nextInt();
        binarytree<Integer> root = new binarytree<>(root_data);
        if(root_data == -1){
            return null;
        }
        binarytree<Integer> left_child = takeinputbetter(false,root.data,true);
        binarytree<Integer> right_child = takeinputbetter(false,root.data,false);
        root.left = left_child;
        root.right = right_child;

        return root;
    }
    public static void main(String[] args){
        binarytree<Integer> input = takeinputbetter(true,0,false);// to take input from the takeinputbetter method
        printrec(input);
    }
}
